@{
    Layout = "_Layout";
    ViewData["Title"] = "Moje Opinie";
}

<!DOCTYPE html>

<style>
    table {
        padding-top: 50px;
        border-collapse: collapse;
        font-family: Arial, Helvetica, sans-serif;
    }

    thead {
        color: gray;
        font-weight: bold;
        padding: 5px;
        border-bottom: 1px black solid;
    }

    tr, td, th {
        padding: 5px;
        padding-top: 15px;
        padding-bottom: 15px;
        text-align: center;
    }

    th {
        font-weight: normal;
    }

    caption {
        margin-top: 30px;
        margin-bottom: 50px;
        border-top: thin black solid;
        border-bottom: thin black solid;
        font-weight: bold;
        padding: 5px;
        font-size: 30px;
        color: dimgray;
        font-weight: normal;
    }

    tfoot {
        border-top: 1.5px black solid;
    }
</style>

<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Zadanie 7</title>
</head>
<body>
    <div id="out">
    </div>
    <br>
    <br>
    <br>
    <button id="but1" style="margin-left: 230px">Dodaj produkt</button>
    <button id="but2" style="margin-left: 20 px;" onclick="clearAll()">Usuń wszystko</button>
    <dialog id="dialog1">
        <h2>Dodaj produkt</h2>
        <hr>
        <p>Podaj dane:</p>
        <form id="form1" method="dialog">
            <div>
                <input type="text" name="name" placeholder="Nazwa">
                <input type="text" name="count" placeholder="Ilość">
                <input type="text" name="price" placeholder="Cena">
                <input type="submit" value="Dodaj">
                <input type="reset" value="Anuluj">
            </div>
            <p id="messagedialog"></p>
        </form>
    </dialog>

    <dialog id="dialog2">
        <h4>
            Czy na pewno chcesz usunąć wszystkie produkty?</h2>
            <form id="form2" method="dialog">
                <input type="submit" value="Usuń">
                <input type="reset" value="Anuluj">
            </form>
    </dialog>

    <dialog id="dialog3">
        <h2>
            Edytuj produkt</h4>
            <hr>
            <p>Podaj dane:</p>
            <form id="form3">
                <input type="text" name="name" placeholder="Nazwa">
                <input type="text" name="count" placeholder="Ilość">
                <input type="text" name="price" placeholder="Cena">
                <input type="submit" value="Zapisz">
                <input type="reset" value="Anuluj">
            </form>
    </dialog>

    <dialog id="dialog4">
        <h2>
            Usuń produkt</h4>
            <hr>
            <p>Czy napewno chcesz usunąć ten produkt?</p>
            <form id="form4">
                <input type="submit" value="Usuń">
                <input type="reset" value="Anuluj">
            </form>
    </dialog>

    <p id="low"></p>
</body>
</html>


<script>
    var userId = @Html.Raw(Json.Serialize(ViewData["userId"]));
    const lowermessage = document.getElementById("low");
    lowermessage.innerHTML = userId;

    var jsonFilePath = '../../opinions.json';

    // fetch(jsonFilePath, {
    //     method: 'GET',
    //     headers: {
    //         'Content-Type': 'application/json',
    //     },
    // })
    //     .then(response => {
    //         if (!response.ok) {
    //             throw new Error(`Błąd sieci: ${response.status}`);
    //         }
    //         return response.json();
    //     })
    //     .then(data => {
    //         if (data && data.users) {
    //             const user = data.users.find(u => u.userId === parseInt(userId));
    //             if (user) {
    //                 modif = parseInt(user.products[0].modif);
    //             } else {
    //                 console.error('Użytkownik o podanym userId nie znaleziony.');
    //             }
    //         }
    //     })
    //     .catch (error => console.error('Błąd:', error));

    let x = 0;

    const out = document.getElementById("out");

    const table = document.createElement("TABLE");

    table.appendChild(addCaption());
    table.appendChild(addHeader());
    table.appendChild(addBody());
    table.appendChild(addFooter());

    colorRow();

    out.appendChild(table);

    const btn = document.getElementById("but1");
    const form = document.getElementById("form1");
    const dlg = document.getElementById("dialog1");

    const btn2 = document.getElementById("but2");
    const form2 = document.getElementById("form2");
    const dlg2 = document.getElementById("dialog2");

    const form3 = document.getElementById("form3");
    const dlg3 = document.getElementById("dialog3");

    const form4 = document.getElementById("form4");
    const dlg4 = document.getElementById("dialog4");

    btn.onclick = () => {
        form.reset();
        dlg.showModal();
    }

    form.onsubmit = (event) => {
        const mess = document.getElementById("messagedialog");
        if (form.count.value === "" || !Number.isInteger(Number(form.count.value)) || Number(form.count.value) <= 0) {
            mess.innerHTML = "Ilość musi być większa od zera";
            event.preventDefault();
            dlg.showModal();
            return;
        }
        if (form.price.value === "" || !Number.isInteger(Number(form.price.value)) || Number(form.price.value) <= 0) {
            mess.innerHTML = "Cena musi być większa od zera";
            event.preventDefault();
            dlg.showModal();
            return;
        }
        if(form.name.value === "")
        {
            mess.innerHTML = "Proszę podać nazwę";
            event.preventDefault();
            dlg.showModal();
            return;
        }
        const newOpinion =
        {
            name: form.name.value,
            count: form.count.value,
            price: form.price.value
        };

        console.log(newOpinion.name);

        fetch(jsonFilePath)
            .then(response => { 
                return response.json(); 
            })
            .then(data => {
                const user = data.users.find(u => u.userId === parseInt(userId));
                if (user) {
                    console.log("fetch");
                    return fetch(jsonFilePath, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(newOpinion)
                    })
                    .catch(error => console.error('Błąd:', error));
                    console.log("po f");
                }
                console.log("reject");
                return Promise.reject(new Error('Nie znaleziono użytkownika')); 
            })
            .then(response => {
                //location.reload();
            })
            .then(() => {                
            })
            .catch(error => console.error('Błąd:', error));
    }

    form.onreset = () => {
        dlg.close();
    }

    btn2.onclick = () => {
        form2.reset();
        dlg2.showModal();
    }

    form2.onsubmit = (event) => {
        event.preventDefault();
        fetch(jsonFilePath)
            .then(response => response.json())
            .then(data => {
                for (let product of data.products) {                   
                        fetch(jsonFilePath, {
                            method: 'DELETE',
                        })
                            .then(response => response.json())
                            .then(data => { })                   
                }
            })
            .then(() => { location.reload(); });
    }

    form2.onreset = () => {
        dlg2.close();
    }

    form3.onsubmit = () => {
        let name = form3.name.value;
        let count = form3.count.value;
        let price = form3.price.value;

        if (count <= 0) {
            //if(count.length!=0)
            {
                lowermessage.innerHTML = "Ilość musi być większa od zera!";
                return;
            }
            // fetch(url + `/${x}`)
            //     .then(response => response.json())
            //     .then(data => count = parseFloat(data.count).toFixed(2));
        }
        else count = parseFloat(count).toFixed(2);
        if (price <= 0) {
            // if(price.length!=0)
            {
                lowermessage.innerHTML = "Cena musi być większa od zera!";
                return;
            }
            // fetch(url + `/${x}`)
            //     .then(response => response.json())
            //     .then(data => {
            //         price = parseFloat(data.price).toFixed(2);
            //     });
        }
        else price = parseFloat(price).toFixed(2);
        if (name.length == 0) {
            return;
            // fetch(url + `/${x}`)
            //     .then(response => response.json())
            //     .then(data => {
            //         name = data.name;
            //     });
        }

        fetch(jsonFilePath, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(
                {
                    name: name,
                    count: count,
                    price: price
                })
        })
            .then(response => response.json())
            .then(data => { });
       
        lowermessage.innerHTML = " ";
    }

    form3.onreset = () => {
        dlg3.close();
    }

    form4.onsubmit = () => {
        fetch(jsonFilePath, {
            method: 'DELETE',
        })
            .then(response => response.json())
            .then(data => { })      
    }

    form4.onreset = () => {
        dlg4.close();
    }

    function addCaption() {
        const caption = document.createElement("CAPTION");
        let today = new Date();

        
        caption.innerHTML = "PARAGON " + today.getDate() + "-" + (today.getMonth() + 1) + "-" + (today.getFullYear() % 100) + "/";
                  
        return caption;
    }

    function addHeader() {
        const thead = document.createElement("THEAD");
        const headerRow = thead.insertRow();
        const headers = ["LP", "NAZWA", "ILOŚĆ", "CENA", "SUMA"];

        for (let i = 0; i < headers.length; ++i) {
            let th = document.createElement("TH");
            if (i == 1) {
                th.style.textAlign = "left";
            }
            if (i == 2) {
                th.style.textAlign = "right";
            }
            th.style.width = "100px";
            th.innerHTML = headers[i];
            headerRow.appendChild(th);
        }

        return thead;
    }

    function addBody() {
        const tbody = document.createElement("TBODY");
        let i = 0;
        fetch(jsonFilePath)
            .then(response => response.json())
            .then(data => {
                if (data && data.users) {
                    const user = data.users.find(u => u.userId === parseInt(userId));
                    if (user) {
                        for (let product of user.products) {
                            const headerRow = tbody.insertRow();
                            if ((table.rows.length - 1) % 2 == 0) headerRow.style = "background-color:whitesmoke;";
                            let td = document.createElement("TD");
                            td.innerHTML = i + 1;
                            headerRow.appendChild(td);
                            td = document.createElement("TD");
                            td.style.textAlign = "left";
                            td.innerHTML = product.name;
                            headerRow.appendChild(td);
                            td = document.createElement("TD");
                            td.style.textAlign = "right";
                            td.innerHTML = product.count;
                            headerRow.appendChild(td);
                            td = document.createElement("TD");
                            td.innerHTML = (parseFloat(product.price)).toFixed(2) + " zł";
                            headerRow.appendChild(td);
                            td = document.createElement("TD");
                            td.innerHTML = (Math.round(product.price * product.count * 100) / 100).toFixed(2) + " zł";
                            headerRow.appendChild(td);
                            const but2 = document.createElement("BUTTON");
                            but2.innerHTML = "Edytuj";
                            but2.id = "be" + i;
                            but2.onclick = function () {
                                x = product.id;
                                form3.reset();
                                dlg3.showModal();
                            };
                            const but3 = document.createElement("BUTTON");
                            but3.innerHTML = "Usuń";
                            but3.id = "bu" + i;
                            but3.onclick = function () {
                                x = product.id;
                                form4.reset();
                                dlg4.showModal();
                            };
                            but2.style = but3.style = "margin-top: 15px; margin-left: 5px;";
                            headerRow.appendChild(but2);
                            headerRow.appendChild(but3);
                            i++;
                        }
                    } else {
                        console.error('Użytkownik o podanym userId nie został znaleziony.');
                    }
                }
            })

        return tbody;
    }

    function addFooter() {
        const tfoot = document.createElement("TFOOT");
        const footerRow = tfoot.insertRow();
        let remainingCell = document.createElement("TH");
        remainingCell.colSpan = 3;
        footerRow.appendChild(remainingCell);

        for (let i = 0; i < 2; ++i) {
            let th = document.createElement("TH");
            if (i == 0) th.innerHTML = "RAZEM";
            else {
                let sum = 0;
                fetch(jsonFilePath)
                    .then(response => response.json())
                    .then(data => {    
                        if (data && data.users) {
                            const user = data.users.find(u => u.userId === parseInt(userId));
                            if (user) {
                                for (let product of user.products) {
                                    sum += (Math.round(parseFloat(product.price) * parseFloat(product.count) * 100) / 100);
                                }
                                th.innerHTML = sum.toFixed(2) + " zł";
                            } else {
                                console.error('Użytkownik o podanym userId nie został znaleziony.');
                            }
                        }
                    })
            }
            footerRow.appendChild(th);
        }

        return tfoot;
    }

    function colorRow() {
        for (let i = 0; i < table.rows.length; i++) {
            if (i % 2 != 0) table.rows[i].style = "background-color:whitesmoke;";
        }
    }

</script>