@model IEnumerable<Biblioteka.Models.Book>

@{
    ViewData["Title"] = "Home Page";
}

@* <script src="js/jquery3.js"></script> *@

<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

    <!-- Selectize CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/css/selectize.bootstrap2.css">

    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />


    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

    <!-- Selectize JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.6/js/standalone/selectize.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

</head>


<div class="text-center">

    <h1 class="display-4">Witamy</h1>
    <br />

    <div class="swiper">
        <!-- Additional required wrapper -->
        <div class="swiper-wrapper">
            @if (Model != null && Model.Count() > 0)
            {
                foreach (var item in Model.TakeLast(3))  // Pobranie 3 ostatnich elementów
                {
                    <div class="swiper-slide">
                        <div class="col-md-4">
                            <a href="@Url.Action("Details", "Books", new { id = item.bookId })">
                                <img src="@item.bookPhoto" alt="Book Photo" />
                            </a>
                        </div>
                        <div class="col-md-4">
                            <div class="bookTitle">@Html.DisplayFor(modelItem => item.title)</div>
                            <div class="catName">@Html.DisplayFor(modelItem => item.category.catName)</div>
                            <div class="bookAuthors">
                                @if (item.authors != null)
                                {
                                    @foreach (var author in item.authors)
                                    {
                                        <a>@author.name  @author.surname</a>
                                        <br />
                                    }
                                }
                            </div>
                        </div >
                    </div>
                }
            }
        </div>
        <!-- If we need pagination -->
        <div class="swiper-pagination"></div>

        <!-- If we need navigation buttons -->
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>

        <!-- If we need scrollbar -->
        <div class="swiper-scrollbar"></div>
    </div>

    <br />
    <br />
    <br />

    <form id="searchForm" action="/Home/Index" method="post">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-4">
                    <label for="checkbox">Filtruj: </label><br>
                    <input type="checkbox" id="year1" name="year2021" value="2021" class="checkboxFilter">
                    <label for="year2021"> 2021</label>
                    <input type="checkbox" id="year2" name="year2022" value="2022" class="checkboxFilter">
                    <label for="year2022"> 2022</label>
                    <input type="checkbox" id="year3" name="year2023" value="2023" class="checkboxFilter">
                    <label for="year2023"> 2023</label>
                    <input type="checkbox" id="year4" name="year2024" value="2024" class="checkboxFilter">
                    <label for="year2024"> 2024</label><br>
                    @if(ViewData["categories"]!=null)
                    {
                        var i = 0;
                        @foreach(var element in ViewData["categories"] as IList<Category>)
                        {
                            @if(i!=0 && i%4==0)
                            {
                                <br>
                            }
                            <input type="checkbox" id="@element.catName" name="cat @i" value="@element.catName" class="checkboxFilter">
                            <label for="cat @i"> @element.catName</label>
                            i = i + 1;                            
                        }
                        <br>
                    }
                    <button type="button" class="customButton" onclick="filterElements()">Filtruj</button>
                   
                </div>
                <div class="col-md-4">
                    <select id="select-to" class="contacts" placeholder="Szukaj..."></select>
                </div>
                <div class="col-md-1">
                    <a href="#" id="Search" class="btn btn-dark" onclick="submitSearchForm()">Szukaj</a>
                </div>
                <!-- Ukryte pole do przechowywania wybranych wartości -->
                <input type="hidden" id="selectedBooksInput" name="selectedBooks" value="">
                <div class ="col-md-3">
                    <label for="sortSelect">Sortuj według: </label>
                    <select id="sortSelect">
                        <option value="0">Tytuł A-Z</option>
                        <option value="1">Tytuł Z-A</option>
                        <option value="2">Najnowsze</option>
                        <option value="3">Najstarsze</option>                      
                    </select>
                </div>
            </div>
        </div>
    </form>  

    <div style="width: 90%; margin: auto;">
        @foreach (var item in Model)
        {
            <div class="okienko">
                <a href="@Url.Action("Details", "Books", new { id = item.bookId })">
                    <img src="@item.bookPhoto" alt="Book Photo" />
                </a><br />
                <span class="booktitle">@Html.DisplayFor(modelItem => item.title)</span>
                <span class="category">@Html.DisplayFor(modelItem => item.category.catName)</span><br />
                <span class="releaseDatehidden">@Html.DisplayFor(modelItem => item.releaseDate)</span>
                @if(item.authors!=null)
                {
                    @foreach (var author in item.authors)
                    {
                        <a>@author.name  @author.surname</a>
                        <br />
                    }
                }
                @if (item.tags != null)
                {
                    @foreach (var tag in item.tags)
                    {
                        if(tag == item.tags.Last())
                        {
                            <a>@tag.tagName</a>
                        }
                        else 
                        {
                            <a>@tag.tagName, </a>
                        }                        
                    }
                }
                @* @string.Join(", ", item.authors.Select(rb => rb.name + rb.surname)) *@
                @if (!User.IsInRole("Admin") && !User.IsInRole("Employee"))
                {
                    <button id="toBasket" class="customButton" onclick="addProduct(@item.bookId, @item.stockLevel)">Dodaj do koszyka</button>
                }

                @if (User.IsInRole("Admin"))
                {
                    <a class="nav-link customButton" asp-area="" asp-controller="Books" asp-action="Edit" asp-route-id="@item.bookId">Edytuj</a>
                    <a class="nav-link customButton" asp-area="" asp-controller="Books" asp-action="Delete" asp-route-id="@item.bookId">Usuń</a>
                }               
            </div>
        }
    </div>
</div>
<br />
<br />
<br />
<br />

<dialog id="dialog2">
    <p>Przykro nam, ale danej książki nie ma na stanie.
        Zaloguj się, żeby zapisać się do kolejki.
    </p>
    <form id="form2" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog1">
    <p>Produkt został dodany do koszyka</p>
    <form id="form1" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog3">
    <h2>Produkt jest niedostępny.       
    </h2>
    <p>
        Czy chcesz zapisać się do kolejki?
    </p>
    <form id="form3" method="dialog">
        <div>
            <input type="submit" value="OK">
            <input type="reset" value="Anuluj">
        </div>
    </form>
</dialog>

<dialog id="dialog4">
    <p>
        Pomyślnie dodano do kolejki.
    </p>
    <form id="form4" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog5">
    <p>
        Przykro nam ale masz za dużo książek w koszyku.
    </p>
    <form id="form5" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>


@section scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/lib/bootstrap/dist/js/selectize.js"></script>

    <script type="text/javascript">

        const swiper = new Swiper('.swiper', {
            // Optional parameters
            //direction: 'vertical',
            //loop: true,

            // If we need pagination
            pagination: {
                el: '.swiper-pagination',
            },

            // Navigation arrows
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },

            // And if we need scrollbar
            scrollbar: {
                el: '.swiper-scrollbar',
            },
        });

        if (JSON.parse(localStorage.getItem(-1)) == null) {
            let modif = 0;
            localStorage.setItem((-1).toString(),
                JSON.stringify(
                    {
                        modif: modif
                    }));
        }      

        var $select;
        var userId = @Html.Raw(Json.Serialize(ViewData["userId"]));
        var limits = @Html.Raw(Json.Serialize(ViewData["limits"]));

        const form = document.getElementById("form1");
        const dlg = document.getElementById("dialog1");
        const form2 = document.getElementById("form2");
        const dlg2 = document.getElementById("dialog2");
        const form3 = document.getElementById("form3");
        const dlg3 = document.getElementById("dialog3");
        const form4 = document.getElementById("form4");
        const dlg4 = document.getElementById("dialog4");
        const form5 = document.getElementById("form5");
        const dlg5 = document.getElementById("dialog5");


        $(document).ready(function () {
            $select = $('#select-to').selectize({
                persist: false,
                maxItems: null,
                optgroupField: 'title',
                valueField: 'bookId',
                labelField: 'title',                
                searchField: ['title', 'authors', 'isbn', 'releaseDate'],
                sortField: 'title',                
                onInitialize: function () {
                    loadBooksAJAX();
                },
                onChange: function (value) {
                    loadBooksAJAX();
                },
                render: {
                    
                    item: function (item, escape) {
                        return (
                            "<div>" +
                            (item.title ? '<span class="name">' + escape(item.title) + "</span>": "") +
                            "</div>"
                        );
                    },
                    option: function (item, escape) {

                        var photoHtml = item.bookPhoto ? '<img src="' + escape(item.bookPhoto) + '" alt="' + escape(item.title) + '" class="searchBookImage" />' : '';
                        var authorsHtml = item.authors ? '<span class="authors">' + escape(item.authors.join(', ')) + '</span>' : '';


                        return '<div class="selectDiv">' +
                            '<span class="mainName">' + photoHtml + '</span>' +
                            '<span class="subLabel">' + escape(item.title) + '</span>' +
                            '<span class="subAuthors">' + authorsHtml + '</span>' +
                            '</div>';
                    }
                }              
            });

            function sortBooks(sortField) {
                var container = $(".okienko").parent();
                var booksArray = $(".okienko").toArray();

                booksArray.sort(function (a, b) {
                    var aValue;
                    var bValue;

                    if (sortField === "0") {
                        const indexnegative = JSON.parse(localStorage.getItem(-1));
                        let modif = 0;
                        localStorage.setItem((-1).toString(),
                            JSON.stringify(
                                {
                                    modif: modif
                                }));
                        aValue = $(a).find(".booktitle").text();
                        bValue = $(b).find(".booktitle").text();
                        // Sortowanie rosnące
                        return aValue.localeCompare(bValue);
                    } else if (sortField === "1") {
                        const indexnegative = JSON.parse(localStorage.getItem(-1));
                        let modif = 1;
                        localStorage.setItem((-1).toString(),
                            JSON.stringify(
                                {
                                    modif: modif
                                }));
                        aValue = $(a).find(".booktitle").text();
                        bValue = $(b).find(".booktitle").text();
                        // Sortowanie malejące
                        return bValue.localeCompare(aValue);
                    } else if (sortField === "2") {
                        const indexnegative = JSON.parse(localStorage.getItem(-1));
                        let modif = 2;
                        localStorage.setItem((-1).toString(),
                            JSON.stringify(
                                {
                                    modif: modif
                                }));
                        aValue = $(a).find(".releaseDatehidden").text();
                        bValue = $(b).find(".releaseDatehidden").text();
                        return bValue.localeCompare(aValue);
                    }else if(sortField === "3"){
                        const indexnegative = JSON.parse(localStorage.getItem(-1));
                        let modif = 3;
                        localStorage.setItem((-1).toString(),
                            JSON.stringify(
                                {
                                    modif: modif
                                }));
                        aValue = $(a).find(".releaseDatehidden").text();
                        bValue = $(b).find(".releaseDatehidden").text();
                        return aValue.localeCompare(bValue);
                    }
                    
                   
                    return 0;
                });

                container.empty();
                container.append(booksArray);
            }

            // Event handler for sorting when the select changes
            $("#sortSelect").change(function () {
                var selectedSortField = $(this).val();
                sortBooks(selectedSortField);
            });

            const indexnegative = JSON.parse(localStorage.getItem(-1));
            sortBooks(indexnegative.modif.toString());           
        });

        function submitSearchForm() {
            var selectedValues = $select[0].selectize.getValue();
            console.log(selectedValues);

            // Przypisz wartość do ukrytego pola formularza
            $('#selectedBooksInput').val(selectedValues);

            console.log(selectedBooksInput.selectedValues);

            // Złóż formularz
            $('#searchForm').submit();
        }

        function loadBooksAJAX() {
            $.ajax({
                url: '/Home/GetBooks',
                type: 'POST',
                success: function (data) {
                    for (var i = 0; i < data.length; i++) { 
                        $select[0].selectize.addOption(data[i]);
                        $select[0].selectize.refreshOptions();}
                },
                error: function (response) {
                    alert('Błąd: ' + response)
                }
            });
        }

        function addProduct(bookId, stockLevel) {
            console.log("\nuserId " + userId + "\n" + stockLevel + "\n");           
                $.ajax({
                    url: '/api/Queue',
                    type: 'GET',
                    success: function (data) {
                        console.log('Dane pobrane:', data);

                        for (var bookQueue in data) {
                            if (bookQueue != bookId) continue;
                            else {
                                var booksArray = data[bookQueue];
                                console.log('booksArray ', booksArray);

                                var currentDate = new Date();
                                booksArray.forEach(book => {
                                    console.log('quantity ', book.Quantity + "\ndate " + book.Date);

                                    var dateParts = book.Date.split(".");
                                    var bookDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);

                                    // Obliczanie różnicy w dniach między datami
                                    var timeDiff = currentDate - bookDate;
                                    var daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                                    // Usuwanie rekordu, jeśli różnica dni jest większa niż 2
                                    if (daysDiff > 3) {
                                        console.log('Usuwanie rekordu: ', book);

                                        var queueData = {
                                            BookId: bookQueue,
                                            UserId: book.UserId,
                                            Quantity: 0
                                        };

                                        $.ajax({
                                        url: `/api/Queue/${queueData.BookId}`,
                                            type: 'DELETE',
                                            contentType: 'application/json',
                                            data: JSON.stringify(queueData),
                                            success: function (data) {
                                                if (data.success) {
                                                    console.log(data.message);
                                                } else {
                                                    console.error(data.message);
                                                }
                                            },
                                            error: function (error) {
                                                console.error(`Error: ${error.statusText}`);
                                            }
                                        });
                                    }
                                    else
                                    {
                                        stockLevel = stockLevel - parseInt(book.Quantity);
                                    }
                                });
                            }
                            //bookQueue to id książki w queue
                        }
                        console.log('stockLevel', stockLevel);

                        if (parseInt(stockLevel) < 1 && userId != null) {
                            form3.reset();
                            dlg3.showModal();

                            form3.onsubmit = () => {
                                var data = {
                                    bookId: parseInt(bookId),
                                    userId: parseInt(userId),
                                    quantity: 1 // Załóżmy, że dodajemy jedną pozycję do kolejki
                                };
                                console.log(data);
                                fetch('/api/Queue', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(data)
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`HTTP error! Status: ${response.status}`);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        console.log(data);
                                        if (data.success) {
                                            dlg3.close();
                                            form4.reset();
                                            dlg4.showModal();
                                        } else {
                                            console.error(data.message);
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Fetch Error:', error);
                                    });
                            }

                            form3.onreset = () => {
                                dlg3.close();
                            }
                        }
                        else if (parseInt(stockLevel) < 1 && userId == null) {
                            form2.reset();
                            dlg2.showModal();
                        }

                        else {
                            var storedBooks = localStorage.getItem("books");
                            var books = {};
                            if (storedBooks) books = JSON.parse(storedBooks);
                            var sum = 0;

                            if (storedBooks) {
                                Object.keys(books).forEach(function (key) {
                                    sum += books[key];
                                });

                                console.log("Sum of values:", sum);
                            }

                        if (sum >= limits[0].limitWaiting) {
                                form5.reset();
                                dlg5.showModal();
                            }
                            else {
                                if (books[bookId] != null) books[bookId] = books[bookId] + 1;
                                else books[bookId] = 1;

                                localStorage.setItem("books", JSON.stringify(books));

                                let modif = (localStorage.getItem(-1).modif) + 1;
                                localStorage.setItem((-1).toString(),
                                    JSON.stringify(
                                        {
                                            modif: modif
                                        }));

                                form.reset();
                                dlg.showModal();
                            }
                        }
                    },
                    error: function (error) {
                        console.error('Błąd pobierania danych:', error);
                    }
                });

            
        }

        function filterElements() {
            var container = $(".okienko").parent();
            var booksArray = $(".okienko").toArray();
            booksArray.forEach(book => { $(book).show(); });

            var selectedValues = $(".checkboxFilter:checked").map(function () {
                return $(this).val();
            }).get();

            console.log(selectedValues);

            booksArray.forEach(book => {
                var yearValue = $(book).find(".releaseDatehidden").text();
                var categoryValue = $(book).find(".category").text().trim();
                // console.log(yearValue);
                // console.log(categoryValue);
                // console.log(selectedValues.length);

                if ((selectedValues.length > 0) && !(
                    (selectedValues.includes("2021") && yearValue.includes(2021)) ||
                    (selectedValues.includes("2022") && yearValue.includes(2022)) ||
                    (selectedValues.includes("2023") && yearValue.includes(2023)) ||
                    (selectedValues.includes("2024") && yearValue.includes(2024)) ||
                    (selectedValues.includes(categoryValue)))
                ) {
                    $(book).hide();
                    // console.log("2021 " + !(selectedValues.includes("2021")) && yearValue.includes(2021));
                    // console.log("2022 " + !(selectedValues.includes("2022")) && yearValue.includes(2022));
                    // console.log("2023 " + !(selectedValues.includes("2023")) && yearValue.includes(2023));
                    // console.log("2024 " + !(selectedValues.includes("2024")) && yearValue.includes(2024));
                    // console.log("cat " + !(selectedValues.includes(categoryValue)));
                    // console.log("długość " + selectedValues.length > 0);
                }
            });

            container.empty();
            container.append(booksArray);
        }

        </script>
}


@section css {
    <style type="text/css">
        .selectize-dropdown .active {
            background-image: unset !important;
            background-color: var(--secondary-light) !important;
            color: var(--secondary-content);
        }

        div.selectDiv {
            background-color: var(--foreground);
            border-bottom: 1px solid #e0e0e0;
            color: #000;
        }

        .mainName {
            font-size: 12px;
        }

        .subLabel {
            font-size: 10px;
            font-weight: bolder;
            padding-left: 10px;
        }

        .subValue {
            font-size: 10px;
        }

        .mainRow {
        }

        .selectizeFormGroup {
        }

        .selectize-control.contacts .selectize-input > div .title {
            opacity: 0.8;
        }

        .selectize-control.contacts .selectize-input > div .bookPhoto + .title {
            margin-left: 5px;
        }

        .selectize-control.contacts .selectize-input > div .title:before {
            content: "<";
        }

        .selectize-control.contacts .selectize-input > div .title:after {
            content: ">";
        }

        .selectize-control.contacts .selectize-dropdown .caption {
            font-size: 12px;
            display: block;
            color: #a0a0a0;
        }

        div.selectize-input {
            background-color: whitesmoke !important;
            color: #342b08 !important;
        }

    </style>
}

