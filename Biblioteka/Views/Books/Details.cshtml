@model Biblioteka.Models.Book

@{
    ViewData["Title"] = "Details";
}

<h1>@Html.DisplayFor(model => model.title)</h1>

<h4>Numer ISBN @Html.DisplayFor(model => model.ISBN)</h4>

<div>
    <hr />
    <div class="row">
        <div class="col-md-3">
            <img src="@Html.DisplayFor(model => model.bookPhoto)" class="img-fluid" />
        </div>

        <div class="col-md-9">
            <dl class="row">
                <dt class="col-sm-3">Autorzy:</dt>
                <dd class="col-sm-9">
                    @if (Model.authors != null)
                    {
                        @foreach (var author in Model.authors)
                        {
                            <a>@author.name  @author.surname</a>
                            <br />
                        }
                    }
                </dd>
                <dt class="col-sm-3">Kategoria:</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.category.catName)</dd>
                <dt class="col-sm-3">Data wydania:</dt>
                <dd class="col-sm-9">@Html.DisplayFor(model => model.releaseDate)</dd>
                @if (!User.IsInRole("Admin") && !User.IsInRole("Employee"))
                {
                    <button id="toBasket" onclick="addProduct(@Model.bookId, @Model.stockLevel)">Dodaj do koszyka</button>
                }
            </dl>
        </div>
    </div>
    <div class="col-sm-12">
        <dt>Opis:</dt>
        <dd>@Html.DisplayFor(model => model.description)</dd>
    </div>
    <div class="col-sm-12">
        <button id="btnDownloadPdf" class="customButton" data-pd="@Model.fileAsString">Pobierz PDF z skrótem książki</button>
    </div>
</div>

<div>
    @if (User.IsInRole("Employee") || User.IsInRole("Admin"))
    {
        <a asp-action="Edit" asp-route-id="@Model?.bookId">Edit</a> <p>|</p>
    }
    <a asp-action="Index">Back to List</a>
</div>

<dialog id="dialog2">
    <p>
        Przykro nam, ale danej książki nie ma na stanie.
        Zaloguj się, żeby zapisać się do kolejki.
    </p>
    <form id="form2" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog1">
    <p>Produkt został dodany do koszyka</p>
    <form id="form1" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog3">
    <h2>
        Produkt jest niedostępny.
    </h2>
    <p>
        Czy chcesz zapisać się do kolejki?
    </p>
    <form id="form3" method="dialog">
        <div>
            <input type="submit" value="OK">
            <input type="reset" value="Anuluj">
        </div>
    </form>
</dialog>

<dialog id="dialog4">
    <p>
        Pomyślnie dodano do kolejki.
    </p>
    <form id="form4" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog5">
    <p>
        Przykro nam ale najpierw musisz oddać wypożyczone książki.
    </p>
    <form id="form5" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<script>
    var userId = @Html.Raw(Json.Serialize(ViewData["userId"]));
    var pdfBytesBase64 = @Html.Raw(Json.Serialize(ViewData["fileAsString"]));
    var bookTitleForPDF = @Html.Raw(Json.Serialize(ViewData["bookTitle"]));

    const form = document.getElementById("form1");
    const dlg = document.getElementById("dialog1");
    const form2 = document.getElementById("form2");
    const dlg2 = document.getElementById("dialog2");
    const form3 = document.getElementById("form3");
    const dlg3 = document.getElementById("dialog3");
    const form4 = document.getElementById("form4");
    const dlg4 = document.getElementById("dialog4");
    const form5 = document.getElementById("form5");
    const dlg5 = document.getElementById("dialog5");

    const btnDownload = document.getElementById("btnDownloadPdf");

    function addProduct(bookId, stockLevel) {
        console.log("\nuserId " + userId + "\n" + stockLevel + "\n");
        $.ajax({
            url: '/api/Queue',
            type: 'GET',
            success: function (data) {
                console.log('Dane pobrane:', data);

                for (var bookQueue in data) {
                    if (bookQueue != bookId) continue;
                    else {
                        var booksArray = data[bookQueue];
                        console.log('booksArray ', booksArray);
                        var currentDate = new Date();
                        booksArray.forEach(book => {
                            console.log('quantity ', book.Quantity + "\ndate " + book.Date);

                            var dateParts = book.Date.split(".");
                            var bookDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);

                            // Obliczanie różnicy w dniach między datami
                            var timeDiff = currentDate - bookDate;
                            var daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                            // Usuwanie rekordu, jeśli różnica dni jest większa niż 2
                            if (daysDiff > 3) {
                                console.log('Usuwanie rekordu: ', book);

                                var queueData = {
                                    BookId: bookQueue,
                                    UserId: book.UserId,
                                    Quantity: 0
                                };

                                $.ajax({
                                    url: `/api/Queue/${queueData.BookId}`,
                                    type: 'DELETE',
                                    contentType: 'application/json',
                                    data: JSON.stringify(queueData),
                                    success: function (data) {
                                        if (data.success) {
                                            console.log(data.message);
                                        } else {
                                            console.error(data.message);
                                        }
                                    },
                                    error: function (error) {
                                        console.error(`Error: ${error.statusText}`);
                                    }
                                });
                            }
                            else {
                                stockLevel = stockLevel - parseInt(book.Quantity);
                            }
                        });
                    }
                    //bookQueue to id książki w queue
                }
                console.log('stockLevel', stockLevel);

                if (parseInt(stockLevel) < 1 && userId != null) {
                    form3.reset();
                    dlg3.showModal();

                    form3.onsubmit = () => {
                        var data = {
                            bookId: parseInt(bookId),
                            userId: parseInt(userId),
                            quantity: 1 // Załóżmy, że dodajemy jedną pozycję do kolejki
                        };
                        console.log(data);
                        fetch('/api/Queue', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(`HTTP error! Status: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                console.log(data);
                                if (data.success) {
                                    dlg3.close();
                                    form4.reset();
                                    dlg4.showModal();
                                } else {
                                    console.error(data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Fetch Error:', error);
                            });
                    }

                    form3.onreset = () => {
                        dlg3.close();
                    }
                }
                else if (parseInt(stockLevel) < 1 && userId == null) {
                    form2.reset();
                    dlg2.showModal();
                }

                else {
                    var storedBooks = localStorage.getItem("books");
                    var books = {};
                    if (storedBooks) books = JSON.parse(storedBooks);
                    var sum = 0;

                    if (storedBooks) {
                        Object.keys(books).forEach(function (key) {
                            sum += books[key];
                        });

                        console.log("Sum of values:", sum);
                    }

                    if (sum >= 6) {
                        form5.reset();
                        dlg5.showModal();
                    }
                    else {
                        if (books[bookId] != null) books[bookId] = books[bookId] + 1;
                        else books[bookId] = 1;

                        localStorage.setItem("books", JSON.stringify(books));

                        let modif = (localStorage.getItem(-1).modif) + 1;
                        localStorage.setItem((-1).toString(),
                            JSON.stringify(
                                {
                                    modif: modif
                                }));

                        form.reset();
                        dlg.showModal();
                    }
                }
            },
            error: function (error) {
                console.error('Błąd pobierania danych:', error);
            }
        });
    }

    btnDownload.onclick = () => {
        console.log(pdfBytesBase64);
        
        // Dekodowanie danych base64 do tablicy bajtów
        var pdfBytes = new Uint8Array(atob(pdfBytesBase64).split('').map(char => char.charCodeAt(0)));
        console.log(pdfBytes);

        const blob = new Blob([pdfBytes], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = bookTitleForPDF + ".pdf"; // Nazwa pliku do pobrania

        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        URL.revokeObjectURL(url);
    }
</script>