@model IEnumerable<Biblioteka.Models.Book>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                Zdjęcie
            </th>
            <th>
                @Html.DisplayNameFor(model => model.title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ISBN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.releaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.stockLevel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.bookPhoto)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <img src=@item.bookPhoto style="width: 120px; height: 155px;" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ISBN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.releaseDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.stockLevel)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.bookPhoto)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.category.catName)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.bookId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.bookId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.bookId">Delete</a>
                    @if (!User.IsInRole("Admin") && !User.IsInRole("Employee"))
                    {
                        <button id="toBasket" onclick="addProduct(@item.bookId, @item.stockLevel)">Dodaj do koszyka</button>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>

<dialog id="dialog1">
    <p>Produkt został dodany do koszyka</p>
    <form id="form1" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog2">
    <p>Zostałeś dodany na listę oczekujących słodziaku UwU</p>
    <form id="form2" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<dialog id="dialog3">
    <p>Przykro nam, można jednocześnie wypożyczyć max. 6 książek</p>
    <form id="form3" method="dialog">
        <div>
            <input type="submit" value="OK">
        </div>
    </form>
</dialog>

<script>
    const form = document.getElementById("form1");
    const dlg = document.getElementById("dialog1");
    const form2 = document.getElementById("form2");
    const dlg2 = document.getElementById("dialog2");
    const form3 = document.getElementById("form3");
    const dlg3 = document.getElementById("dialog3");


    form.onsubmit = () => {
        dlg.close();
    }

    form2.onsubmit = () => {
        dlg2.close();
    }

    function addProduct(bookId, stockLevel) {
        if (parseInt(stockLevel) < 1) {
            // Dodaj do kolejki
            var data = {
                bookId: parseInt(bookId),
                userId: parseInt(1),
                quantity: 1 // Załóżmy, że dodajemy jedną pozycję do kolejki
            };
            console.log(data);
            fetch('/Queue/AddToQueue', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);
                    if (data.success) {
                        form2.reset();
                        dlg2.showModal();
                    } else {
                        console.error(data.message);
                    }
                })
                .catch(error => {
                    console.error('Fetch Error:', error);
                });

            //form2.reset();
            //dlg2.showModal();
        }

        else {
            var storedBooks = localStorage.getItem("books");
            var books = {};
            if (storedBooks) books = JSON.parse(storedBooks);
            var sum = 0;

            if (storedBooks) {
                Object.keys(books).forEach(function (key) {
                    sum += books[key];
                });

                console.log("Sum of values:", sum);
            }

            if (sum >= 6) {
                form3.reset();
                dlg3.showModal();
            }
            else {
                if (books[bookId] != null) books[bookId] = books[bookId] + 1;
                else books[bookId] = 1;

                localStorage.setItem("books", JSON.stringify(books));

                let modif = (localStorage.getItem(-1).modif) + 1;
                localStorage.setItem((-1).toString(),
                    JSON.stringify(
                        {
                            modif: modif
                        }));

                form.reset();
                dlg.showModal();
            }
        }
    }
</script>